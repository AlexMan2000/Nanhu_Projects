<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>assets</key>
	<array>
		<string>[]</string>
	</array>
	<key>packageID</key>
	<string>fi.lacquer.conduit.scriptedplugin.generator.roundshapes</string>
	<key>pluginCategory</key>
	<string>Generator</string>
	<key>pluginName</key>
	<string>Round Shapes</string>
	<key>scriptNodeClass</key>
	<string>PixMathBufNode_JSCanvas</string>
	<key>scriptNodeClassPackageID</key>
	<string>fi.lacquer.conduit.jscanvas</string>
	<key>scripts</key>
	<dict>
		<key>__constructor</key>
		<string>	this.tableData = [];
	this.tableSelRow = -1;
	this.myParam = 2;
	this.myAsset = 1;
	
	MaskShape = function(x, y, size, opacity) {
		this.x = x || 0;
		this.y = y || 0;
		this.size = size || 0.1;
		this.opacity = opacity || 1;
	}

	this.persist = function() {
		var encoded = JSON.stringify(this.tableData);
		if (encoded) {
			interface.setAsset(this.myAsset, encoded);
		}
	}

	this.unpersist = function() {
		var asset = interface.getAsset(this.myAsset);
		var decoded = JSON.parse(asset);
		if (decoded) {
			this.tableData = decoded;
		}
	}

	this.onTableSelection = function(info) {
		this.tableSelRow = info.rowIndex;
		///sys.trace("selected row: "+this.tableSelRow);

		var tableParam = interface.getParam(this.myParam);	
		var infoView = tableParam.detailView.getChildById("detailInfo");
		var fieldView = tableParam.detailView.getChildById("detailControl");
	
		if (this.tableSelRow &gt; -1) {
			infoView.text = "Selected row is: " + this.tableSelRow;
			fieldView.enabled = true;
			fieldView.numberValue = this.tableData[this.tableSelRow].opacity;
		} else {
			infoView.text = "Nothing is currently selected.";
			fieldView.enabled = false;
		}
	}

	this.onTableReorder = function(info) {
		///sys.trace("from row: "+info.sourceRows[0]+" to: "+info.destinationRows[0]);
		if (info.tableData) {
			this.tableData = info.tableData;
		
			this.persist();
			return true;
		}
		return false;
	}

	this.onButtonClick = function(buttonId) {
		if (buttonId == "deleteFromList" &amp;&amp; this.tableSelRow &gt; -1) {
			this.tableData.splice(this.tableSelRow, 1);
		
			///sys.trace("table count now "+this.tableData.length);
			interface.refreshParam(this.myParam);
		
			this.persist();
			return true;
		}
		return false;
	}

	this.onDetailControlAction = function(controlId) {
		if (this.tableSelRow &gt; -1) {
			var paramObj = interface.getParam(this.myParam);
			var theControl = paramObj.detailView.getChildById(controlId);
			var newValue = theControl.numberValue;
		
			this.tableData[this.tableSelRow].opacity = newValue;
		
			this.persist();
			return true;
		}
		return false;
	}

</string>
		<key>describeNode</key>
		<string>if (requestInfo == "nodeDescription") {
	return "Renders circular shapes. Has on-screen controls (click in view to draw a circle).";
}

return "";
</string>
		<key>__json_nodeParams</key>
		<string>[
  { "paramType": "float", "name": "Opacity", "min": 0, "max": 1, "default": 1 }

  { "paramType": "table",
    "dataBinding": "this.tableData",
    "numberOfVisibleRows": 12,
	"allowsRowReordering": true,

    "columns": [ 
		{ "templateId": "autoGeneratedIndex" }
        { "id": "x", "label": "X position", "numberFormat": { "maxFractionDigits": 2, "minFractionDigits": 0, "numberStyle": "percent" } }
        { "id": "y", "label": "Y position", "numberFormat": { "maxFractionDigits": 2, "minFractionDigits": 0, "numberStyle": "percent" } }
        { "id": "size", "label": "Size",    "numberFormat": { "maxFractionDigits": 2, "minFractionDigits": 0, "numberStyle": "percent" } }
      ],

	"buttons": [
		{ "id": "deleteFromList", "templateId": "deleteButton" }
	  ],

	"buttonActionBinding": "this.onButtonClick",
	"selectionActionBinding": "this.onTableSelection",
	"rowReorderBinding": "this.onTableReorder",
	
	"detailView": [
		{ "type": "label", "id": "detailInfo", "text": "hello node! this is a placeholder info text" },
		
		{ "type": "numberinput", "id": "detailControl",
		  "label": "Shape opacity:",
		  "min": 0, "max": 1, "default": 1,
		  "enabled": false,
          "resize": "width",
		  "actionBinding": "this.onDetailControlAction" }
	  ]
  }
]</string>
		<key>onMouseClick</key>
		<string>	this.clickStartX = event.imageX;
	this.clickStartY = event.imageY;
	
	var x = event.imageX / event.imageWidth;
	var y = event.imageY / event.imageHeight;
	var newShape = new MaskShape(x, y, 0.02);

	if (this.tableData === null)
		this.tableData = [];	

	this.tableData.push(newShape);

	return true;
</string>
		<key>onMouseDrag</key>
		<string>	var shape = this.tableData.pop();

	var xDist = (event.imageX - this.clickStartX);
	var yDist = (event.imageY - this.clickStartY);

	var dist = Math.sqrt(xDist*xDist + yDist*yDist);
	///sys.trace("drag distance: "+dist);
	
	shape.size = dist / event.imageHeight;

	this.tableData.push(shape);
	return true;
</string>
		<key>onMouseRelease</key>
		<string>	interface.refreshParam(this.myParam);
	this.persist();
	return true;
</string>
		<key>onParamAction</key>
		<string></string>
		<key>generateInCanvas</key>
		<string>	var count = (this.tableData) ? this.tableData.length : 0;
	if (count &lt; 1)
		return;
	
	var opacity = parseFloat(interface.getParam(1));
	if (opacity &lt;= 0)
		return;

	var ctx = canvas.getContext('2d'); 
	var w = canvas.width;
	var h = canvas.height;

	for (var i = 0; i &lt; count; i++) {
		var shape = this.tableData[i];
        
        ctx.beginPath();
		ctx.arc(w * shape.x, h * shape.y, h * shape.size,
				0, 2*Math.PI, false);
			
		ctx.fillStyle = "rgba(255, 255, 255, "+(opacity * parseFloat(shape.opacity))+")";
		ctx.fill();
	}

</string>
		<key>renderNodeIcon</key>
		<string>	var ctx = canvas.getContext('2d'); 
	var w = canvas.width;
	var h = canvas.height;

    ctx.beginPath();
	ctx.arc(w*0.25, h*0.4,  h/4, 0, 2*Math.PI, false);
	ctx.fillStyle = 'rgba(255, 255, 255, 1.0)';
	ctx.fill();
	
    ctx.beginPath();
	ctx.arc(w*0.68, h*0.3,  h/3.4, 0, 2*Math.PI, false);
	ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
	ctx.fill();

    ctx.beginPath();
	ctx.arc(w*0.5, h*0.55,  h/2.6, 0, 2*Math.PI, false);
	ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';
	ctx.fill();
</string>
		<key>renderOnScreenVideoControls</key>
		<string>	var count = (this.tableData) ? this.tableData.length : 0;
	if (count &lt; 1)
		return;
	
	var surface = event.viewSurface;
	var drawCtx = surface.drawingContext;
	var w = event.imageWidth;
	var h = event.imageHeight;

	drawCtx.setShaderParam(0, [1, 1, 0, 0.9]);
	drawCtx.modelViewTransform = event.imageToViewTransform;
	drawCtx.renderStyle = "onScreenControls";

	for (var i = 0; i &lt; count; i++) {
		var shape = this.tableData[i];
		var clist = new CurveList();
	
		//clist.insertCurve("linear", 0, 0, 300, 200);
		//clist.appendCurveToPoint("linear", 100, 400);
		clist.addArc(w * shape.x, h * shape.y, h * shape.size,
						0, 2*Math.PI);

		surface.draw2DCurveList("line-strip", clist);
	}
</string>
	</dict>
</dict>
</plist>
