<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>assets</key>
	<array>
		<data>
		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
		</data>
	</array>
	<key>packageID</key>
	<string>fi.lacquer.conduit.scriptedplugin.stylize.rain</string>
	<key>pluginCategory</key>
	<string>Stylize</string>
	<key>pluginName</key>
	<string>Rain</string>
	<key>scriptNodeClass</key>
	<string>PixMathCapsuleNode</string>
	<key>scriptNodeClassPackageID</key>
	<string>fi.lacquer.conduit.supernode</string>
	<key>scripts</key>
	<dict>
		<key>__constructor</key>
		<string>// in this constructor we'll generate the images used for drawing the rain drops
// and the initial particle state
var drawRainDropPicture1 = function(canvas) {
	var ctx = canvas.getContext('2d'); 
	var w = canvas.width;
	var h = canvas.height;
	ctx.save();
	ctx.clearRect(0, 0, w, h);
	
	ctx.beginPath();
	ctx.moveTo(50, 55);
	ctx.lineTo(100, 105);
	
 	var grad = ctx.createLinearGradient(40, 40, 100, 100);
	grad.addColorStop(0, "rgba(50, 60, 250, 0.07)");
	grad.addColorStop(0.5, "rgba(120, 140, 250, 0.7)");
	grad.addColorStop(1, "rgba(0, 0, 250, 0.17)");
	ctx.strokeStyle = grad;
	ctx.lineWidth = 1.5;
	ctx.stroke();
	
	ctx.beginPath();
	ctx.moveTo(50, 3);
	ctx.lineTo(105, 55 + 3);
 	grad = ctx.createLinearGradient(50, 0, 100, 50);
	grad.addColorStop(0, "rgba(20, 80, 250, 0.07)");
	grad.addColorStop(0.3, "rgba(30, 50, 250, 0.7)");
	grad.addColorStop(1, "rgba(20, 40, 250, 0.0)");
	ctx.strokeStyle = grad;
	ctx.lineWidth = 2.0;
	ctx.stroke();

	ctx.beginPath();
	ctx.moveTo(2, 50);
	ctx.lineTo(20, 72);
 	grad = ctx.createLinearGradient(0, 0, 50, 80);
	grad.addColorStop(0, "rgba(20, 80, 250, 0.07)");
	grad.addColorStop(0.3, "rgba(20, 60, 250, 0.3)");
	grad.addColorStop(0.6, "rgba(20, 60, 250, 0.5)");
	grad.addColorStop(1, "rgba(20, 40, 250, 0.0)");
	ctx.strokeStyle = grad;
	ctx.lineWidth = 2.3;
	ctx.stroke();
	
	ctx.restore();
}
var drawRainDropPicture2 = function(canvas) {
	var ctx = canvas.getContext('2d'); 
	var w = canvas.width;
	var h = canvas.height;
	ctx.save();
	ctx.clearRect(0, 0, w, h);
	
	ctx.beginPath();
	ctx.moveTo(2, 8);
	ctx.lineTo(35, 49);
	
 	var grad = ctx.createLinearGradient(0, 0, 50, 50);
	grad.addColorStop(0, "rgba(50, 60, 250, 0.07)");
	grad.addColorStop(0.2, "rgba(120, 140, 250, 0.77)");
	grad.addColorStop(0.7, "rgba(120, 140, 250, 0.95)");
	grad.addColorStop(1, "rgba(0, 0, 250, 0.17)");
	ctx.strokeStyle = grad;
	ctx.lineWidth = 1.0;
	ctx.stroke();
	
	ctx.beginPath();
	ctx.moveTo(70, 40);
	ctx.lineTo(95, 66);
 	grad = ctx.createLinearGradient(70, 40, 100, 70);
	grad.addColorStop(0, "rgba(20, 80, 250, 0.07)");
	grad.addColorStop(0.8, "rgba(120, 140, 250, 0.7)");
	grad.addColorStop(0.9, "rgba(20, 40, 250, 0.0)");
	ctx.strokeStyle = grad;
	ctx.lineWidth = 2.1;
	ctx.stroke();

	ctx.beginPath();
	ctx.moveTo(30, 65);
	ctx.lineTo(65, 98);
 	grad = ctx.createLinearGradient(0, 0, 100, 100);
	grad.addColorStop(0, "rgba(20, 80, 250, 0.07)");
	grad.addColorStop(0.5, "rgba(20, 60, 250, 0.3)");
	grad.addColorStop(0.7, "rgba(20, 60, 250, 0.5)");
	grad.addColorStop(1, "rgba(20, 40, 250, 0.0)");
	ctx.strokeStyle = grad;
	ctx.lineWidth = 1.3;
	ctx.stroke();
	
	ctx.restore();
}

this.picture1 = new Canvas(110, 110);
drawRainDropPicture1(this.picture1);

this.picture2 = new Canvas(110, 110);
drawRainDropPicture2(this.picture2);

this.makeParticle = function(xMin, xMax, yMin, yMax) {
 	return { "x": xMin + (xMax - xMin) * Math.random(), 
			 "y": yMin + (yMax - yMin) * Math.random(),
			 "speed": 0.05 + 0.1 * Math.random(),
			 "scale": 40 + 200 * Math.random(),
			 "pic": (Math.random() &lt; 0.5) ? 1 : 2
		   };
}

var generateParticles = function(array, count, maker) {
	for (var i = 0; i &lt; count; i++) {
		array.push(maker(-0.3, 0.9, -0.3, 0.9));
	}
}
this.particles = [];
generateParticles(this.particles, 250, this.makeParticle);

</string>
		<key>describeNode</key>
		<string>if (requestInfo == "nodeDescription") {
	return "Renders animated rain. This example shows combining JavaScript and Conduit effects into one plugin.";
}
else if (requestInfo == "nodeInputCount") {
    return 1;
}
return "";
</string>
		<key>__json_nodeParams</key>
		<string>[
  { "paramType": "float", "name": "Rotation", "min": -180, "max": 180, "default": 0 }
]</string>
		<key>onMouseClick</key>
		<string></string>
		<key>onMouseDrag</key>
		<string></string>
		<key>onMouseRelease</key>
		<string></string>
		<key>onParamAction</key>
		<string></string>
		<key>renderNodeIcon</key>
		<string>	var ctx = canvas.getContext('2d'); 
	var w = canvas.width;
	var h = canvas.height;
	ctx.save();
	
	ctx.beginPath();
	ctx.moveTo(w*0.5, h*0.5);
	ctx.lineTo(w*0.9, h*0.9);
	
 	var grad = ctx.createLinearGradient(40, 40, 100, 100);
	grad.addColorStop(0, "rgba(50, 60, 250, 0.07)");
	grad.addColorStop(0.5, "rgba(120, 140, 250, 0.9)");
	grad.addColorStop(1, "rgba(0, 0, 250, 0.17)");
	ctx.strokeStyle = grad;
	ctx.lineWidth = 3.5;
	ctx.stroke();
	
	ctx.beginPath();
	ctx.moveTo(w*0.4, h*0.01);
	ctx.lineTo(w*0.94, h*0.56);
 	grad = ctx.createLinearGradient(50, 0, 100, 50);
	grad.addColorStop(0, "rgba(20, 80, 250, 0.07)");
	grad.addColorStop(0.3, "rgba(30, 50, 250, 0.9)");
	grad.addColorStop(1, "rgba(20, 40, 250, 0.0)");
	ctx.strokeStyle = grad;
	ctx.lineWidth = 5.0;
	ctx.stroke();

	ctx.beginPath();
	ctx.moveTo(w*0.01, h*0.45);
	ctx.lineTo(w*0.2, h*0.65);
 	grad = ctx.createLinearGradient(0, 0, 50, 80);
	grad.addColorStop(0, "rgba(20, 80, 250, 0.07)");
	grad.addColorStop(0.3, "rgba(20, 60, 250, 0.6)");
	grad.addColorStop(0.6, "rgba(20, 60, 250, 0.9)");
	grad.addColorStop(1, "rgba(20, 40, 250, 0.0)");
	ctx.strokeStyle = grad;
	ctx.lineWidth = 4.3;
	ctx.stroke();
	
	ctx.restore();
</string>
		<key>renderNodeOutput</key>
		<string>// this call is where the heavy lifting happens.
// 'surface' is the GPU surface that we need to fill with our final output.
var w = surface.width;
var h = surface.height;

// first we'll draw the rain drops in a temp surface.
// 'interface' is a global variable provided by Conduit;
// it offers access to methods specific to our effect node.
// getTempSurface() will produce a surface that's guaranteed to
// be the same size as our output surface.
var tempSurf = interface.getTempSurface();
tempSurf.clear();

// these are the two raindrop images created in our constructor method above.
var picTexture1 = this.picture1.getTextureForSurface(tempSurf);
picTexture1.samplingMode = "linear";

var picTexture2 = this.picture2.getTextureForSurface(tempSurf);
picTexture2.samplingMode = "linear";

var drawDrop = function(surface, x, y, rotationInDeg, scale) {
	var trs = new Transform3D();
	trs.rotate(Math.PI*(rotationInDeg/360), 0, 0, 1);
	trs.scale(scale, scale);
	trs.translate(x, y);
	surface.drawingContext.modelViewTransform = trs;
	surface.compositeUnitQuad();
}

var viewDim = Math.max(w, h);
var viewAspH = h / viewDim;
var newArray = [];
var numParticles = this.particles.length;

for (var i = 0; i &lt; numParticles; i++) {
	var particle = this.particles[i];
	var x = particle.x;
	var y = particle.y;
	var texture = (particle.pic == 1) ? picTexture1 : picTexture2;
	
	tempSurf.drawingContext.textureArray = [ texture ];
	
	drawDrop(tempSurf, x*viewDim, y*viewDim, params[1] + Math.random()*5, particle.scale);
	
	var speed = particle.speed;
	x += speed;
	y += speed;
	//sys.log("particle y: "+y);
	
	if (y &lt; viewAspH) {
		// particle is still in view
		particle.x = x;
		particle.y = y;
	} else {
		// particle is below view, so create a new one above the view
		particle = this.makeParticle(-1, 0.5, -0.5, -0.2);
	}
	newArray.push(particle);
}
this.particles = newArray;

// to finish up, we'll render using a conduit that composites the raindrops
// over the input image and applies a glow effect.
var renderer2 = interface.getRendererForConduit(interface.getAsset(1));

surface.drawingContext.textureArray = [ inputTextures[0], tempSurf.texture ];
renderer2.renderInSurface(surface);

</string>
		<key>renderOnScreenVideoControls</key>
		<string></string>
	</dict>
</dict>
</plist>
